#+title: Diversification Mechanisms for Best-First Search (最良優先探索のための探索非局在化手法)
#+author: Masataro Asai
#+include: "head.org"
#+LINK: img file:img/%s
#+LINK: png file:img/%s.png
#+LINK: jpg file:img/%s.jpg
#+LINK: spng file:img/static/%s.png
#+LINK: sjpg file:img/static/%s.jpg
#+LINK: sgif file:img/static/%s.gif

# Plateau か プラトー, intra/inter 再確認, 飛ばすならBIP(solution), motivation を語れ

#+begin_outline-text-1
#+begin_center
#+begin_larger
Masataro Asai, The University of Tokyo 

(Advisor: Alex Fukunaga)
#+end_larger
#+end_center

25min + 15min Q/A

#+begin_note
#+begin_alignright

#+end_alignright
#+end_note

#+begin_resume
こんにちは、浅井政太郎と申します、本日は博士過程の研究結果として論文を提出した、
最良優先探索のための探索日局在化手法について発表します。
#+end_resume
#+end_outline-text-1

* 背景: グラフ探索

大規模なグラフでの最短経路探索は重要な問題である。

+ MSA GED スケジューリング プランニング

* 背景 -- AIプランニング                                      :3min:noexport:

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span6
 [[png:astro/1]]
 #+end_span6
 #+begin_span6
 [[png:rescue/1]]
 #+end_span6
 #+end_row-fluid
 #+end_container-fluid

** 誰?

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span6
 [[png:astro/1]]
 #+end_span6
 #+begin_span6
 [[png:rescue/1]]
 #+end_span6
 #+end_row-fluid
 #+end_container-fluid

*** 誰?

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span6
 [[png:astro/2]]
 #+end_span6
 #+begin_span6
 [[png:rescue/1]]
 #+end_span6
 #+end_row-fluid
 #+end_container-fluid

*** 誰?

  #+begin_container-fluid
  #+begin_row-fluid
  #+begin_span6
  [[png:astro/final]]
  #+end_span6
  #+begin_span6
  [[png:rescue/1]]
  #+end_span6
  #+end_row-fluid
  #+end_container-fluid

*** 誰?

  #+begin_container-fluid
  #+begin_row-fluid
  #+begin_span6
  [[png:astro/final]]
  #+end_span6
  #+begin_span6
  [[png:rescue/2]]
  #+end_span6
  #+end_row-fluid
  #+end_container-fluid

*** 誰?

  #+begin_container-fluid
  #+begin_row-fluid
  #+begin_span6
  [[png:astro/final]]
  #+end_span6
  #+begin_span6
  [[png:rescue/3]]
  #+end_span6
  #+end_row-fluid
  #+end_container-fluid

*** 誰?

  #+begin_container-fluid
  #+begin_row-fluid
  #+begin_span6
  [[png:astro/final]]
  #+end_span6
  #+begin_span6
  [[png:rescue/final]]
  #+end_span6
  #+end_row-fluid
  #+end_container-fluid

** 実際の大規模災害では非実用的 --- 操縦士が足りない!

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span2
 [[png:rescue/rescue]]
 [[png:rescue/rescue]]
 [[png:rescue/rescue]]
 [[png:rescue/silent]]
 #+end_span2
 #+begin_span10
 [[jpg:static/tsunami]]
 #+end_span10
 #+end_row-fluid
 #+end_container-fluid

 #+begin_larger
 #+begin_alignright
 + そのままでは役に立たない!
 #+end_alignright
 #+end_larger

*** 操縦士を増やせない -- Human Resource and Training

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span4
  [[png:rescue/1]]
 #+end_span4
 #+begin_span8

   + ✘ /時間/ がかかる :: 訓練に ＞100時間, *必要な時だけ増やす* のは不可能
   + ✘ /￥￥￥￥/ がかかる :: 訓練官、訓練場所、訓練用具
   + ✘ 技術は /維持が重要/ :: 定期的な再訓練、長期的コスト、さらなるマニー
   + ✘ 平時は /無駄/ な技術 :: 普段は意味がない -- 無駄なマニー!
 #+end_span8
 #+end_row-fluid
 #+end_container-fluid

** 自律行動のための自動プランナ (≠ モータ制御)

 [[png:planning/1]]

** 自律行動のための自動プランナ (≠ モータ制御)

 [[png:planning/2]]

** 自律行動のための自動プランナ (≠ モータ制御)

 [[png:planning/final]]

** AIプランニングの */Killer App/*                                 :noexport:


#+begin_container-fluid
#+begin_row-fluid
#+begin_span7
#+begin_larger
+ 人が高価or不可能な作業 :: 原発, 宇宙空間, 火星, 深海
+ 正しさと最適性の理論保証が必要なミッションクリティカルシステム :: 
     製造システム、運送 (時間=お金)

     人工衛星 (燃料使いきれば運用終了)

     間違った解は許されない
+ 思考過程を説明可能なシステム :: 
     レスキュー・宇宙船 (人間の安全がかかっている)
#+end_larger

# [[sjpg:martian]]

#+end_span7
#+begin_span5

[[sjpg:gravity-m]]

#+end_span5
#+end_row-fluid
#+end_container-fluid

** AIと自動プランニング の位置づけ -- /理論/ と /実応用/ の中間

 緑は /理論/ 、オレンジは /実応用/ 、 AI はその橋渡し (どれともかぶらない部分もある)

 [[png:planning-related-field]]

* 背景 -- 古典プランニング問題 (決定的,完全情報) -- Blocksworld        :3min:
  
#+HTML: <embed src="img/plan.svg" type="image/svg+xml"  />

#+begin_larger
非古典的なさまざまな拡張
#+begin_alignright
(並列アクション,POMDP,HTN... どのAIの教科書にものっている)
#+end_alignright
#+end_larger

** アクション = 条件付き状態遷移

#+begin_center
#+begin_xlarge
アクション (move ?X ?Y)
#+end_xlarge
#+end_center

#+begin_center
*?X*, *?Y* : 変数。 値 *BLOCK-A*, *BLOCK-B* などを適用して使う

*条件* と *効果* で構成される
#+end_center


#+begin_container-fluid
#+begin_row-fluid
#+begin_span7
#+begin_quote
*条件* : 実行に必要な条件を表す命題

　(clear *?X*) : 積み木 *?X* の上が空

　(clear *?Y*) : 積み木 *?Y* の上に空

*効果* : 前後の状態の *差分* を表す命題

　(on *?X* *?Y*) を *追加* : *?Y* の上は *?X*

　(clear *?Y*) を *削除*
#+end_quote
#+end_span7
#+begin_span5
#+begin_src lisp
(:action move
 :parameters (?X ?Y)
 :preconditions
   (and (clear ?X)   ; (1)
        (clear ?Y))  ; (2)

 :effect
   (and (on ?X ?Y)   ; (3)
        (not         ; (4)
         (clear ?Y))))
#+end_src
#+begin_alignright
#+begin_larger
モデリング言語 *PDDL* で記述
#+end_larger
#+end_alignright
#+end_span5
#+end_row-fluid
#+end_container-fluid

** *PDDL* : Planning Domain Description Language                   :noexport:

International Planning Competition で使われている入力形式

#+begin_container-fluid
#+begin_row-fluid
#+begin_span2

#+end_span2
#+begin_span8
#+begin_src lisp
(:action move
 :parameters (?X ?Y)
 :preconditions
   (and (clear ?X)   ; (1)
        (clear ?Y))  ; (2)

 :effect
   (and (on ?X ?Y)   ; (3)
        (not         ; (4)
         (clear ?Y))))
#+end_src
#+end_span8
#+begin_span2

#+end_span2
#+end_row-fluid
#+end_container-fluid

** プランニング = グラフ探索

*ノード* : 状態 = 命題の集合 ⇒ =(on A B)=, =(clear A)= など

*辺*     : アクション ⇒ =(move A B)= 等

[[png:graph]]

# #+begin_container-fluid
# #+begin_row-fluid
# #+begin_span6
# # + ヒューリスティック探索 A*
# # + State-of-the-Art *1
# #+end_span6
# #+begin_span6
# # #+attr_html: :width 50%
# #+end_span6
# #+end_row-fluid
# #+end_container-fluid

#+begin_note
*1 [Helmert, 2006] [Richter, 2010]
#+end_note
  
** Q. いま */はやり/* のDeep Learningとの違いは?                   :noexport:

 A. レイヤが違う

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span6
 *機械学習・Neural Networks* 
 
 for *認識・反射*
 + 入力 は *Subsymbolic* (連続値)
   
   画像、音声、非構造化テキスト: 
 + *感覚的知能*:
   
   　 */反応/, /直後/ の行動の決定*
   #+begin_smaller
   *パブロフの犬* : 餌を認知→よだれ

   *自動運転* : 赤信号,人 → 止まる.

   *翻訳* : 文章 → 文章

   *囲碁局面の評価関数* : 局面 → 勝率
   #+end_smaller
   #+begin_larger
   ☺ 効率よく 1-to-1 mapping
   
   ☹ 単純作業
   #+end_larger
 #+end_span6
 #+begin_span6
 *推論・探索*

 for *プランニング・ゲーム・定理証明*
 + 入出力は *Symbolic*
   
   論理 オブジェクト ルール
 + *論理・推論による知能:*

   　 */未来に渡る/ 戦略の決定*
   
   　 (戦略 = 行動の *列や木*)
   #+begin_smaller
   *レスキューロボ* : ゴール = 被災者生存

   *証明器* : ゴール = QED

   *コンパイラ* : 命令列の生成
   
   *囲碁,将棋* : ゴール = 勝利
   #+end_smaller
   #+begin_larger
   ☺ 順序制約+複雑な作業
   #+end_larger
 #+end_span6
 #+end_row-fluid
 #+end_container-fluid

+ AlphaGo = Subsymbolic (DLNNによる評価関数) + Symbolic (MCTSによる探索)

** 既存の有名システム                                              :noexport:

AlphaGo = Subsymbolic (NNによる評価関数) + Symbolic (MCTSによる探索)
+ ただし *ドメイン依存* -- 囲碁に特化, "マス目"や"石"といった概念をハードコード
+ *膨大な棋譜が必要* --- 運用データがない環境(e.g.火星)には適用不能
+ */人って模範解答がないと行動できませんか?/* *真の自律機械は前例無しでも行動可能*

DQN = Subsymbolic (DLNN) + 強化学習 (DLNN)

様々な Atari Game につかえる汎用フレームワーク (Invader, Packman…) だが
+ RLのActing: 学習したpolicyに従ってgreedyに行動
+ Atariゲームは *脊髄反射で生き残ることが可能* → *複雑な論理思考はいらない!*
  
# 実際 *Sokoban など論理思考ゲームでは性能が悪い* ↔ 倉庫番ソルバ

* 発表概要

上記の *グラフ上の知識あり経路探索* のための高速化手法と解析

最良優先探索アルゴリズム の */探索非局在化手法/* による高速化を研究

+ (3章) A* のタイブレークと探索空間の分析

+ (4章) タイブレークによる A* の高速化

+ (5章) 最適解探索のタイブレークの一般化

+ (6章) 充足解探索の タイブレーク手法 と 探索非局在化手法 の統合

+ (7章) BIPによる新たな非局在化手法

* (3章) A*のタイブレークの分析

このスライドはタイブレークの定義のあと

** 今回の話題 : グラフの最小コスト経路探索

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span7

 [[png:graphsearch]]
 #+end_span7
 #+begin_span5

 #+begin_larger
 #+begin_center
 *初期ノード* から

 *ゴールノード* への

 *最小コスト経路探索*
 #+end_center
 #+end_larger

 #+end_span5
 #+end_row-fluid
 #+end_container-fluid

** 最小コスト経路探索 の主要な手法 が A*

 [[png:astar]]

** A*におけるタイブレーキング:

 [[png:astar-emph]]

** タイブレーキングに関する「常識」

 #+begin_center
 *同じ /f_{min}/ なノードが複数あったときどうする?*
 #+end_center

 |----------------------------------------+------------------------------------------------|
 | /1968 Hart, Nilsson and Raphael/ →    | */h/-based tiebreaking* [ /h/ ] :              |
 | (*/最初のA*の論文/*)                   | 　　 -- h値が小さなものを選択                  |
 |                                        |                                                |
 | /教科書(Pearl, 1984)に掲載/         → | *Break ties arbitrarily* :                     |
 |                                        | 　　 -- 「どの手法でも性能にあまり影響しない」 |
 | /Korf, 1985/         →                | *LIFO tiebreaking* [LIFO] :                    |
 |                                        | 　　 -- 最後に生成したノードを選択             |
 |----------------------------------------+------------------------------------------------|
 | *最近は...*                            |                                                |
 | /2007 Hansen and Zhou/                 | [ /h/ ] "が一番うまく行くと                    |
 |                                        | 　　　　　　一般的に知られている"              |
 | /2010 Holte/                           | [ /h/ ] "がよく使われる"                       |
 |----------------------------------------+------------------------------------------------|

 #+begin_alignright
 #+begin_larger
 *[ /h/ ] タイブレーキングが「常識」→ だが、本当に正しいのか？*
 #+end_larger
 #+end_alignright

** そもそも [ /h/ ] は タイブレークの指定として不十分

 /*f*/ も /*h*/ も同じノードが複数ある場合どうするのか?

 → *二段階のタイブレーク法 /X/ が必要*  : 配列表記して [ /h/ , */X/* ]

 (例) *[* /*h*/ , */LIFO/ ]* を使うA*の動作とは?

 + 常に /*f_{min}*/ なノードを選ぶ。
 + *ただし* 複数ノードが /*f_{min}*/ なら, /*h_{min}*/ のノードを選ぶ (第一段階).
 + *まだ* 複数のノードがあるなら, LIFOに従い最後に生成したノードを選ぶ (第二段階).
   #+begin_alignright
   #+begin_smaller
   ( LIFO キューは常に1つのノードを返すのでコレ以上は必要なし )
   #+end_smaller
   #+end_alignright

 |------------------------------------------------+-----------------------------------|
 | 古典プランニングState-of-the-Art Fast Downward | [ /h/, *FIFO* (*論文に明記なし*)] |
 | /(Richter et.al, 2010)/                        |                                   |
 | 15/24パズルのState-of-the-Art ソルバ           | [ /h/, *LIFO* (*論文に明記なし*)] |
 | /(2012 Burns et.al.)/                          |                                   |
 |------------------------------------------------+-----------------------------------|

 #+begin_alignright
 #+begin_larger
 + そんな細かいことは *書くほどのことでもない* という認識

   (なぜなら、下界関数の改善やA*自体の拡張など他に注目しがち)
 #+end_larger
 #+end_alignright

** 実際は、 タイブレーク法は /重要/                                     :ゆっくり:

 標準ベンチマーク問題集では、

 #+begin_larger
 #+begin_center
 *探索時間のほとんどは* */タイブレークのみによって制御される/.*
 #+end_center
 #+end_larger

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span6
 [[png:without-h-nokey]]
 #+end_span6
 #+begin_span6

 #+begin_larger
 #+begin_center
 *探索空間中 ほとんどの*

 *ノードが f=f^** (*Final Plateau*).

 #+begin_smaller
 (*Plateau* = 同じf値を持つノード集合.
 小さい順に探索して最後だからFinal)
 #+end_smaller
 #+end_center

 　

 #+begin_center
 *A*の挙動のほとんどは*

 *実はタイブレークだけによって決まる。*
 #+end_center
 #+end_larger
 #+end_span6
 #+end_row-fluid
 #+end_container-fluid

** 第二段階のタイブレークは重要か？

 | <c>                           | <c>                                     | <c>       |
 | Tiebreaking                   | 説明                                    | Solved    |
 | ［criterion_1, criterion_2 ］ |                                         | Instances |
 |-------------------------------+-----------------------------------------+-----------|
 | ［ /h/,  *FIFO* ］            | *Fast Downwardの標準設定*               |           |
 |-------------------------------+-----------------------------------------+-----------|
 | ［ /h/,  *LIFO* ］            | 同じ /*f_{min}*/ → 最小の /*h*/ を選ぶ |           |
 |                               | 同じ /*h_{min}*/ → *LIFO* で選ぶ       |           |
 |-------------------------------+-----------------------------------------+-----------|

 #+begin_alignright
 1104題の IPC (International Planning Competition) ベンチマーク問題集

 30min, 2GB の資源制限 ヒューリスティック関数は Landmark-Cut (Helmert2008)

  Fast Downward : State-of-the-Art 探索ソルバの名前

 　

 　

 #+end_alignright

** 第二段階のタイブレークは重要か？ → 重要だった!

 | <c>                           | <c>                                     | <c>       |
 | Tiebreaking                   | 説明                                    | Solved    |
 | ［criterion_1, criterion_2 ］ |                                         | Instances |
 |-------------------------------+-----------------------------------------+-----------|
 | ［ /h/,  *FIFO* ］            | *Fast Downwardの標準設定*               | 558       |
 |-------------------------------+-----------------------------------------+-----------|
 | ［ /h/,  *LIFO* ］            | 同じ /*f_{min}*/ → 最小の /*h*/ を選ぶ | *565*     |
 |                               | 同じ /*h_{min}*/ → *LIFO* で選ぶ       |           |
 |-------------------------------+-----------------------------------------+-----------|

 #+begin_alignright
 1104題の IPC (International Planning Competition) ベンチマーク問題集

 30min, 2GB の資源制限 ヒューリスティック関数は Landmark-Cut (Helmert2008)

  Fast Downward : State-of-the-Art 探索ソルバの名前

 #+begin_larger
 *［h, LIFO ］ は ［h, FIFO ］ より速い*
 #+end_larger

 *第二タイブレークは重要!*
 #+end_alignright

** いつどのように早い？ ドメイン (問題セット) ごとに比較

 #+begin_center
 ( 1104題 = (20〜50問)×(35種類の問題集))
 #+end_center

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span6
 [[png:lifo-vs-fifo]]
 #+end_span6
 #+begin_span6

 #+begin_center
 違いが出たドメインは

 #+begin_larger
 *Openstacks* & *Cybersec*
 #+end_larger

 *LIFO は FIFO より 10 倍速い*

 (他のドメインでは凡そ同じ)

 　

 　

 # 補足:

 # ( /*h*/ なし→どのドメインでもLIFOの圧勝)
 #+end_center
 #+end_span6
 #+end_row-fluid
 #+end_container-fluid

** /Openstacks/ & /Cybersec/ は何が特別なのか?

「他と違い」←どう違うのか解説 パズル

トラックのドアを開くのと運転するのが同等に扱われる → 不自然

 他と違い、多くの *ゼロコスト エッジ* が含まれる

 #+begin_smaller
 ゼロコストエッジがあることによって
 #+end_smaller

 *実問題に近い* 、特定の評価関数を最小化するモデルになっている

 + *輸送・配達問題* を *燃料を最小化する* ようにモデル化
   #+begin_alignright
   「運転」アクション以外は *ゼロコスト* (例: 荷物の受け渡しに燃料は必要ない)
   #+end_alignright
 + *Openstacks は 工場で同時生産する製品数を最小化* (Fink and Voss, 1999)
   #+begin_alignright
   製品ごとに専有区画 *stack* を消費。 *stack* を使わない行為はゼロコスト
   #+end_alignright
 + *Cybersec(urity) も実問題由来* (BAMS 検証システム, Boddy et. al. 2005)
   #+begin_alignright
   企業ネットワークを自動攻撃, データ奪取に必要なパスワード解析回数を最小化
   #+end_alignright

#+begin_note
Parametric Complexity Theory では, プランニング問題が
ゼロコストを含む場合は$W2$-complete, 正コストのみの場合 Para-NP-hard (Aghighi 2015)
#+end_note

** ゼロコストがあると /*h*/ によるタイブレークが働かない

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span6
 [[png:with-h-nokey]]
 #+end_span6
 #+begin_span6

 #+begin_center
 ← 前回の絵より狭い定義の *final plateau* : *f=f^**, *h=0*

 *Openstacks* と *Cybersec* では

 ほぼ全てのノードが *h=0*.

 #+begin_larger
 *⇒ /h/-タイブレーキングは*

 *全く効果がない*
 #+end_larger

 #+begin_larger
 *⇒探索は /第二タイブレーク法/*

 */LIFO or FIFO だけが支配/*
 #+end_larger
 #+end_center
 #+end_span6
 #+end_row-fluid
 #+end_container-fluid

 #+begin_alignright
 *LIFOを上回る性能を達成するためには, このFinal Plateauの分析が必要。*
 #+end_alignright

 # , and the LIFO and FIFO plays the primary role. 

** Final Plateau の分析

 [[png:final-plateau0]]

** Final Plateau の分析

 [[png:final-plateau]]

** Final Plateau の分析

 [[png:final-plateau2]]

** ほぼ全ての辺がゼロコストだと...

 [[png:final-plateau3]]

* (4章) Plateau の中の Depth (深さ) を用いた A* の高速化

[[png:final-plateau4]]

初期ノードからの深さとは異なる

** Depthは解の最適性に影響しない

 Final Plateau f=f^* では, *どのゴールもコスト最適* で、深さは関係ない

 #+begin_alignright
 ← *どの辺もゼロコストだから.*
 #+end_alignright

 [[png:final-plateau4-2]]

 #+begin_alignright
 #+begin_larger
 従って *探索する時に深さに偏りがあるのは良くない.*
 #+end_larger
 #+end_alignright

*** 例えば: 常に浅いところから探索するのは良くない

 # /FirstDepth/ tiebreaking strategy : ［ h, /fd/ ］

 [[png:final-plateau5]]

*** 例えば: 常に深いところから探索するのも良くない

 # /LastDepth/ tiebreaking strategy :  ［ h, /ld/ ］

 [[png:final-plateau6]]

** */深さ非局在化/* : 乱択深さ (Random Depth) Tiebreaking

 [[png:final-plateau7]]

 # #+begin_alignright
 # Classic Exploration vs Exploitation problem
 # 
 # Connections to Rapidly exploring Random Tree (RRT) ?
 # #+end_alignright

 # * Random Depth Tiebreaking + random selection within depth
 # 
 # third tiebreaking: not FIFO, not LIFO, but RandomOrder : RO
 # 
 # ［ h, /rd/, RO ］
 # 
 # [[png:final-plateau7]]

** Woodworking問題での深さの分布

 #+begin_center
  
 [[png:depth-distribution0]]

 #+end_center

** Woodworking問題での深さの分布

 #+begin_center
  
 [[png:depth-distribution1]]

 #+end_center

** Woodworking問題での深さの分布

 #+begin_center
  
 [[png:depth-distribution2]]

 #+end_center

** Woodworking問題での深さの分布

 #+begin_center
  
 [[png:depth-distribution3]]

 #+end_center

** Iterative Depth: RandomDepth の決定的バージョン

[[spng:iterative-depth]]

決定的アルゴリズムであるため分析が容易

** Iterative Depth: RandomDepth の決定的バージョン

# max_depth = 0
# while true:
#     for depth in range(max_depth, 0, -1):
#         nodes = expand(depth)
#         max_depth = max(max_depth, 1+depth)
#         for node in nodes:
#             insert(node, 1+depth)

#+begin_src python
class DepthBuckets:
    def __init__(self):
        self.buckets = []
        self.depth = 0
    def insert(self, elem):
        ensure_length(self.buckets, elem.parent.depth+1)
        self.buckets[elem.parent.depth+1].append(elem)
    def expand(self):
        node = self.buckets[self.depth].pop()
        self.depth = self.depth - 1
        if (self.depth < 0): # 深さ0に到達したら
            self.depth = len(self.buckets) # 最大深さにリセット
        return node
#+end_src

決定的アルゴリズムであるため分析が容易



** Forest / No-exhaust assumption による理論的結果

理論的結果:

+ 仮定1: Plateau上のグラフが固定分岐数の森である (forest assumption)
+ 仮定2: 探索中にどの深さのbucketも空にならない (no-exhaust assumption)
+ このとき、最大深さが$D$ ならば、深さ$d$ のbucket の展開回数は $D-d$ に従う
  + $D-d$: 深さに対して線形
  + FIFO/LIFOは深さによる展開回数が指数的に異なる可能性あり

[[spng:depth-fifo-lifo-exponential]]

** 理論的結果と実験的結果の一致

実験的結果に一致 (上の仮定はある程度妥当):

[[spng:depth-theory-practice]]

** 結果: /A*の性能をタイブレーキングを変えるだけで改善!!/

 #+begin_center
 計1724問中, 1題あたり2GBメモリ制限,30分以内に解けた問題の数
 #+end_center

 |                         | <c>                           | <c>           |
 |                         | Fast Downward                 | 提案手法      |
 | 問題セット              | State-of-the-Art 探索システム |               |
 |-------------------------+-------------------------------+---------------|
 | IPC^1 Instances (1104)  | 558                           | *573*         |
 | Zerocost Instances(680) | 256                           | *294*         |
 |-------------------------+-------------------------------+---------------|
 | 合計 (1724)             | 814                           | *867* ( + 53) |
 |-------------------------+-------------------------------+---------------|

 IPC^1 : International Planning Competition で使われる 高次元グラフ探索ベンチマーク

 IPC=(20〜50問)×(35種類の問題集) Zerocost=(20〜50問)×(28種類の問題集)

 それぞれの問題集は全く異なる性質の *最適化問題をモデル化*

 *問題番号が進むと 指数的に難しくなる*

 #+begin_alignright
 #+begin_larger
 *53問 多く解ける = 速い*
 #+end_larger
 #+end_alignright


** まとめ (3,4章の貢献内容)

 + *既存のタイブレーキングのきちんとした定量的評価*
   + 論文にはさらに詳細な実験結果あり
 + *Final Plateauを詳細に分析*
   + *深さに偏りがあるのは良くない*
 + *乱択(RandomDepth)* 及び *決定的(IterativeDepth)* 深さ非局在化タイブレーク法
   + *h-based Tiebreaking* では不十分

* (5章) A* のタイブレークの一般化          :4min:

#+begin_larger
#+begin_center
なぜ RandomDepth/IterativeDepth は成功したのか?
#+end_center
#+end_larger

** A* の動作 (おさらい)

 [[png:astar/astar1]]

*** A* の動作 (おさらい)

  [[png:astar/astar2]]

*** A* の動作 (おさらい)

  [[png:astar/astar3]]

*** A* の動作 (おさらい)

  [[png:astar/astar4]]

 + 解の最適性: 経路の *コストの和* が最小 → *経路の長さ* はいくら長くても良い

 + A*のplateau: 同じコストを持つノード集合 → *特にplateau内では* いくらでも長くて良い

 #+begin_alignright
 #+begin_larger
 + 実は A* は *plateau内では(経路の長さを気にしない)充足解探索をしている* (充足解探索: 最短でなくて良い経路探索)
 #+end_larger
 #+end_alignright
 
** A* を *充足解探索の繰り返し* と再定義

 #+begin_src bash
 while true
     satisficing_search( plateau(f))
     if plateau (f) is SAT; then
        return solution
     else
        Increase f
 #+end_src

 + A* $[ f, \text{fifo} ]$  : *知識なし幅優先探索 [fifo] を それぞれの plateau(f) で実行* , 故に遅い
 + A* $[ f, h, \text{fifo} ]$  : *GBFS [h, fifo] を それぞれの plateau(f) で実行*

   GBFS  (貪欲最良優先探索): A* と同じくノードをOPENリストに保存する。

   ただし、 [h, * ] ( * :LIFO,FIFO,ROのいずれか) によってソート。 h が小さい順に展開 (f=g+h は用いない) する *充足解探索手法*


*** A* as 充足解探索

  #+begin_src bash
  while true
      satisficing_search( plateau(f))
      if plateau (f) is SAT; then
         return solution
      else
         Increase f
  #+end_src

 [[png:sat/sat-astar1]]

*** A* as 充足解探索

  #+begin_src bash
  while true
      satisficing_search( plateau(f))
      if plateau (f) is SAT; then
         return solution
      else
         Increase f
  #+end_src

 [[png:sat/sat-astar2]]

*** A* as 充足解探索

  #+begin_src bash
  while true
      satisficing_search( plateau(f))
      if plateau (f) is SAT; then
         return solution
      else
         Increase f
  #+end_src

 [[png:sat/sat-astar3]]

*** A* as 充足解探索

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span7
  #+begin_src bash
  while true
      satisficing_search( plateau(f))
      if plateau (f) is SAT; then
         return solution
      else
         Increase f
  #+end_src
 #+end_span7
 #+begin_span5
 Implication: 
 #+begin_larger
 + *完全性を保つ充足解探索手法* であれば *なんでも* 最適解探索に埋め込める
 #+end_larger
 #+end_span5
 #+end_row-fluid
 #+begin_row-fluid
 #+begin_span7
 [[png:sat/sat-astar4]]
 #+end_span7
 #+begin_span5
 #+begin_larger
 + A* の *f* 値が許容的であれば、解は常に最適
 #+end_larger
 #+end_span5
 #+end_row-fluid
 #+end_container-fluid

** 知見の応用: 無限グラフ上での A* の完全性

A*の完全性の既存の証明 はゼロコスト問題では成り立たない

書き方

 Dechter and Pearl (1985): [[spng:pearl-cost]]

+ *理論的結果*: ゼロコスト問題でのA*の完全性はタイブレーキングに依存する

  (P1) $f < f^*$ なる plateau(f) のサイズに上界がない時, A∗ は終了しない

  (P2) $\forall f < f^∗$ でplateau(f) が有限である際

  + 完全性は plateau(f*) でのタイブレークに依存

*** 無限グラフ上での A* の完全性

  (P2) $\forall f < f^∗$ でplateau(f) が有限である際

  完全性は plateau(f*) でのタイブレークに依存

  正しくは, *タイブレークのために用いられる充足解探索アルゴリズムの完全性に依存*
  
    |                      | 条件                                                          |
    |----------------------+---------------------------------------------------------------|
    | FIFO [f, fifo]       | 最短経路解の深さ以下で分岐度が有限                            |
    |                      | → なぜなら *幅優先探索[fifo]がそれを必要とするため*          |
    | LIFO [f, lifo]       | plateau(f*) が有限                                            |
    |                      | → なぜなら *深さ優先探索[fifo]がそれを必要とするため*        |
    | Random Order [f, ro] | 常に確率的完全                                                |
    |                      | → なぜなら *[ro] が無限グラフで確率的完全[Valenzano AAAI16]* |


#+begin_center
  + *A*が充足解探索の繰り返しである と再定義することで、*

    */充足解探索の理論的結果を最適解探索に援用可能!/*
#+end_center

** 最適解探索に充足解探索を「埋め込む」

タイブレークのためにXをYして「うめこむ」(具体的に) 結果、大幅な性能向上

  |-----------------------------------------+---------+---------|
  |                                         |   LMcut |     M&S |
  |-----------------------------------------+---------+---------|
  | 既存手法 $[f,h,\text{lifo}]$            |     844 |     797 |
  | B $[f,h,\langle d \rangle,\text{lifo}]$ |     839 |     775 |
  |-----------------------------------------+---------+---------|
  | 埋め込みあり                            | *911.9* | *832.3* |
  |-----------------------------------------+---------+---------|

** まとめ (5章の貢献内容)

+ A* を *充足解探索の繰り返し* と再定義
+ 最適プランニングに充足解探索を埋め込み、性能向上 (結果は省略) 省略せず
+ 充足解探索の理論的結果を、最適探索の理論的性質を調べるのに援用
# + 様々な既存の充足解探索手法が存在するため、多くの応用が考えられる
#   + plateau内に制限した *マクロアクション* (cf. Marvin)
#   + plateau内に制限した *モンテカルロ探索* (cf. Arvand)

#  + Direct analogue for model-based planners (SAT/IP/CSP-based planners)



+ → *充足解探索性能を上げれば最適解探索の性能も上がる*

  以降 *充足解探索のみ考えることとする*

* (6章) 充足解探索の タイブレーク と 探索非局在化手法 の統合           :4min:

+ GBFS  (貪欲最良優先探索) : 充足解探索手法の基本的アルゴリズム ::

     評価関数 h によってノードをソートし、 h が最小のノードを展開

     ただし、 h は *ゴールノードまでの距離の見積もり*

     (非許容的: A*と異なり、下界であることを保証しない)

+ GBFSの *探索非局在化手法* とは ::

     充足解探索は *非許容的 h* を使う ＝ *hが下界でない値を返すことがある*

     GBFSはhを貪欲に信頼 → 既存の探索非局在化手法 は *hを無視して最悪ケースを回避*

** GBFSにおける探索非局在化                                        :noexport:

 [[png:diversify/1]]

*** GBFSにおける探索非局在化
 [[png:diversify/2]]

*** GBFSにおける探索非局在化
 [[png:diversify/3]]

*** GBFSにおける探索非局在化
 [[png:diversify/4]]

*** GBFSにおける探索非局在化
 [[png:diversify/5]]

*** GBFSにおける探索非局在化

 [[png:diversify/final]]

 #+begin_alignright
 探索非局在化手法 : いかにして (ときに信頼できない) 下界関数 $h$ を *無視* するか?
 #+end_alignright

** Preliminaries                                                   :noexport:

 + 探索アルゴリズムの ソート戦略 [S_1, S_2 ..., *] ::
      OPEN list をソートする際の key (辞書順ソート)
 + デフォルト戦略 ::
      ソート戦略の最後の=*= ; FIFO, LIFO, Random のいずれか

      OPEN-list を用いるどんなアルゴリズムにも存在
 + Type-based bucket <T_1, T_2 ...> (Xie14) ::
      ノードを key 値 ごとの *bucket* に振り分ける 例: $\langle g,h\rangle$

      ノード選択時: ランダムな bucket を選び、そのなかのランダムなノードを選ぶ
 + Alternation Queue alt(Q1,Q2...) ::
      複数のOPEN リストを保持し、交互に展開

** 背景

探索非局在化手法は *たくさん* ある

 + Diverse BFS (Imai, Kishimoto '11) --- 複雑な指標を使って探索を非局在化
 + Monte-Carlo Random Walk (MRW, Nakhost and +Muller+ '09) --- 一定確率でランダムウォーク+様々な追加
 + Epsilon-greedy GBFS (Valenzano '14) --- *alt* ([h,*], [Random]) --- 時々ノードを乱択
 + Type-based GBFS (Xie et al '14) --- *alt* ([h,*], <g,h>) --- g, h の組を乱択、その中からさらに乱択
 + GBFS-LE (Xie et al '14) --- h が向上しなくなった場合にランダムウォークを開始
   + GBFS-LS, GBFS-MRW

 #+begin_larger
 + が、アドホック手法が多い

 #+begin_center
 + *既存手法をより /単純に、解析しやすくする/ 枠組みが必要*
 #+end_center
 #+end_larger
 
** 既存の非局在化手法の背景にある考え : Heuristic Error

 \[
    \text{Error} = |h - h^*|
 \]

 $h$ : 下界値, $h^*$ : パーフェクトヒューリスティクス (解までの真の最小経路コスト)

 $h<h^*$ : Underestimation, $h>h^*$ : *Overestimation* : 下界でなくなる 

 #+begin_center
 #+begin_larger
 + Heuristic Error は *非局在化の理解には十分ではない*
 #+end_larger
 #+end_center

*** Heuristic Error は

 [[png:plateau/1]]

*** Heuristic Error は

 [[png:plateau/2]]

*** Heuristic Error は 実は */二次元的/*

 [[png:plateau/3]]

*** Plateau外 error (GBFSのPlateau: 同じh値のノード集合)

 [[png:plateau/4]]

*** Plateau内 error (GBFSのPlateau: 同じh値のノード集合)

 [[png:plateau/5]]

*** Plateau外 error & 非局在化

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span6
 [[png:plateau/4s]]
 #+end_span6
 #+begin_span6
 + *最小の $h^*$ を持つノードが 高い $h$ を持ちうる*
 + *高い $h$ を 時折選ぶのも理にかなっている*
 + *$h$ の選択を非局在化 (最小の $h$ ばかり選ばない)*
 + DBFS, Type-GBFS, $\epsilon$-greedy
 #+end_span6
 #+end_row-fluid
 #+end_container-fluid

*** Plateau内 error & 非局在化

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span6
 [[png:plateau/6s]]
 #+end_span6
 #+begin_span6
 + *どの $h$ の中にも 大きな $h^*$ を持つノードが混じっている*
 + *決定的なタイブレーク (FIFO/LIFO) はたまたま 大きな $h^*$ ばかり選択する可能性がある*
 + *plateau内で探索を非局在化する* 事で *小さな $h^*$ を引く可能性を高める*
 #+end_span6
 #+end_row-fluid
 #+end_container-fluid

#+begin_larger
#+begin_alignright
+ 仮説: *plateau内外のerrorは この図通りに直行している*
#+end_alignright
#+end_larger

** 評価

+ IPC11, IPC14, 5min, 4GB

+ *目的: 同じ非局在化手法を plateau内とplateau外で用いることで、plateau内/外 error が独立であることを示す*

+ *Type-GBFS* (Xie et al. '14) (plateau外) と *RandomDepth Tiebreaking* (plateau内) (かなり似た手法, ただしplateau内/外)

  + Type GBFS --- *Randomize <g,h>*

  + RandomDepth --- *plateau内で Randomize <d>*

    + d ≡ 同じf,hを持つ最も近い先祖までのステップ数

  # + *g, h, d は全て深さに関連した指標*

+ 結果: plateau *内 / 外* 非局在化だけで性能向上するドメインがある (論文の表6.3.1)
+ 結果: それらに plateau *外 / 内* 非局在化を加えても悪影響がない → *効果は直行している*
+ 結果: *内+外 同時に使うことでベンチマーク全体の成績が向上* 

** 小さい表

** まとめ (6章の貢献内容)

+ Plateau 内/外 error は *直行している*
  + したがって、Plateau 内/外 非局在化は常に両方を使うべきである

* (7章) 新たな非局在化手法の開発                                       :4min:

*非局在化手法は評価関数に頼らない=知識なし(blind)探索手法* なので、

GBFS改善のためにはアドホックな手法ではなく *新たな知識なし探索手法=非局在化手法を考えるべき*

#+begin_quote
Type GBFS: *Randomize <g,h>* g: 初期状態からのコスト, h: ゴールまでのコスト見積もり

RandomDepth <d> : d ≡ 同じf,hを持つ最も近い先祖までのステップ数

どちらも *探索ノードの深さに関連した指標* を非局在化
#+end_quote

#+begin_larger
#+begin_center
*探索の幅方向に非局在化する手法を提案*
#+end_center
#+end_larger

** 既存の非局在化手法では失敗する例

 [[png:model/original]]

*** FIFO (幅優先)
 [[png:model/fifo1]]
*** FIFO (幅優先)
 [[png:model/fifo2]]
*** FIFO (幅優先)                                                  :noexport:
 [[png:model/fifo3]]
*** LIFO (深さ優先)
 [[png:model/lifo1]]
*** LIFO (深さ優先)
 [[png:model/lifo2]]
*** LIFO (深さ優先)
 [[png:model/lifo3]]
*** Random
 [[png:model/ro1]]
*** Random
 [[png:model/ro2]]
*** Random-Depth
 [[png:model/rd1]]
*** Random-Depth
 [[png:model/rd2]]

** Bond Invasion Percolation (Wilkinson, Willemsen, '83) (侵入型パーコレーション)

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span6
 [[spng:ip]]
 #+end_span6
 #+begin_span6
 #+begin_larger
 + よく知られた *ランダムフラクタル*
 + 液体が多孔質の物体に染みこむ際の動作のモデル
   
   e.g., 水が石油を含む岩石に浸透

   bond = 辺 のこと
 + これを用いてより *まばらに* 探索し、探索幅の問題を解決
 #+end_larger
 #+end_span6
 #+end_row-fluid
 #+end_container-fluid

#+begin_note
実応用: 石油資源開発
#+end_note

*** 物理学者は別の用語を使う                                       :noexport:

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span6
 [[sgif:site-bond]]
 #+end_span6
 #+begin_span6
 #+begin_larger
 Bond == 辺

 Site == ノード
 #+end_larger
 #+end_span6
 #+end_row-fluid
 #+end_container-fluid

*** BIP の生成 (知識なし)

 重みがランダムなグラフ上の最小全域木(Prim法, Prim '57) と同一 (Barabasi 96)

 最小全域木: グラフの全てのノードを含む木のうち辺の重みが最小のもの

 #+begin_src sh
 push(init, OPEN, 0)

 while (s = pop_min(OPEN)); do
    if s is visited:
      continue
    for (edge,t) in expand(s); do     # an edge & successor t

       # Each edge has a value
       if value(edge) is unset ; then
          value(edge) = random()      # assign a random value
       fi

       push(t, OPEN, value(edge))     # insert
    done
 done
 #+end_src

「ノードに入る辺の value(edge) の最小値」 が 最も小さいノードを展開する

 #+begin_larger
 #+begin_center
 + *重要:* ランダム値は それぞれの辺に *固定* される (*再割当てされない*)
 #+end_center
 #+end_larger

*** 固定されたランダム値のもたらす */遮蔽効果/*

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span5
 [[png:percolation/embankment]]
 #+end_span5
 #+begin_span7
 #+begin_larger
 + */遮蔽/ : 高い値を持った辺に囲まれたことによって一部の領域の探索が妨げられること*

 + *ランダム値の /固定/ がフラクタルな性質を保つために必要*

 + */BIP != Random/ (単なる乱数 = ノードが評価されるたびに別の値になる = 遮蔽が壊される)*
 #+end_larger
 #+end_span7
 #+end_row-fluid
 #+end_container-fluid

*** BIP は最悪ケースを免れる

 [[png:model/bip1]]

*** BIP は最悪ケースを免れる

 [[png:model/bip1-1]]

*** BIP は最悪ケースを免れる

 [[png:model/bip2]]

*** BIP は最悪ケースを免れる

 [[png:model/bip2-1]]

*** 知識なし探索での ノード展開の特性: 探索幅を減らす

深さ毎のノード展開数を計測

 最悪ケースでの分析での説明に合致

 [[png:percolation/width-reduction]]

** まとめ (7章の貢献内容)

+ LIFO, FIFO, Random だけでなく Random/IterativeDepth でも失敗するケースがある
+ BIP: 深さ方向に非局在化するだけではなく、幅方向にも非局在化する
+ 探索幅を減らし, 性能向上 (実験的に確認)
+ 深さ非局在化と併用してState of the Artを改善

* 博士論文の貢献

A*のタイブレークのより完全な分析 (3章)

→ 非局在化タイブレークによる A* の高速化 (4章)

最適解探索のタイブレークの一般化 (5章)

→ 最適解探索を充足解探索の繰り返しに変換:

→ *最適解探索を分析・改善するシンプルな枠組み*

充足解探索の タイブレーク手法 と 探索非局在化手法 の統合 (6章)

→ *非局在化手法は知識なし(乱択化)探索手法*

→ *最良優先探索( A^＊ ,GBFS)を分析・改善するシンプルな枠組み*

フラクタル・最小全域木を用いた新たな非局在化手法 (7章)

→ *新たな知識なし探索手法で性能向上* → *新たな枠組みの有効性を実証*

#+begin_center
主題と目標: */大規模グラフ探索における 非局在化手法の開発・分析/*
#+end_center

お菓子 お茶ペット 審査員

* 付録 (実験結果)

** A* RandomDepth タイブレーク 評価

  + IPC^1 問題集 (20〜50問)×(35種類)
    + 元のドメインはアクションの数だけを数える→非現実的
  + *Zero-cost* 問題集 (620 instances, 28 domains)
    + IPC^1 を *資源消費最適化問題* 改変したもの。例:
      + Woodworking ドメイン: 元問題:最短工程を探索→ 木材消費の最適化
      + Driverslog (運送ドメイン): 最短工程 → 燃料消費の最適化
    + IPCの問題集には歴史的経緯から全ての辺のコストが1のドメインが多い(非現実的)
    + 提案したZero-cost 問題集のほうが *より現実的*

  #+begin_note
  1 -- IPC : International Planning Competition
  #+end_note

*** 評価 (用いた探索設定 (おさらい))                               :noexport:

  #+begin_container-fluid
  #+begin_row-fluid
  #+begin_span6
  A* with *[h, FIFO]*

  /*f_{min}*/ のノードを選ぶ を満たす

  *もし* 複数ノードが /*f_{min}*/ なら

  /*h_{min}*/ を満たすノードを選ぶ

  *もし* 複数ノードが /*h_{min}*/ なら

  Select the oldest node (i.e. FIFO)
  #+end_span6
  #+begin_span6
  A* with *[h, LIFO]*

  /*f_{min}*/ を満たすノードを選ぶ

  *もし* 複数ノードが /*f_{min}*/ なら

  /*h_{min}*/ を満たすノードを選ぶ

  *もし* 複数ノードが /*h_{min}*/ なら

  Select the newest node (i.e. LIFO)
  #+end_span6
  #+end_row-fluid

  -----------

  #+begin_row-fluid
  #+begin_span1

  #+end_span1
  #+begin_span10
  A* with *[h, RD, RO]*,

  /*f_{min}*/ を満たすノードを選ぶ

  *もし* 複数ノードが /*f_{min}*/ なら, /*h_{min}*/ のノードを選ぶ

  *もし* 複数ノードが /*h_{min}*/ なら, ランダムに深さ /d/ を選ぶ

  *もし* 複数ノードが /d/ にいるなら, そのなかからランダムにノードを選ぶ
  #+end_span10
  #+begin_span1

  #+end_span1
  #+end_row-fluid
  #+end_container-fluid

*** 評価 (制限時間内に解けた問題の数)

  #+begin_smaller
  LMcut, Merge-and-Shrink(M&S) : state-of-the-art ヒューリスティック関数

  ［h, RD, RO］ は 10回の平均
  #+end_smaller


  | /                       | <            | >           | <>            |
  |                         | <c>          | <c>         | <c>           |
  |                         | ［h, FIFO］  | ［h, LIFO］ | ［h, RD, RO］ |
  | Domain Set              | (FD Default) |             | (Proposed)    |
  |-------------------------+--------------+-------------+---------------|
  | IPC Instances (1104)    |              |             |               |
  | Zerocost Instances(680) |              |             |               |
  | Sum(1724)               |              |             |               |
  |-------------------------+--------------+-------------+---------------|
  # | M&S                     |              |             |               |
  # | IPC Instances (1104)    |              |             |               |
  # | Zerocost Instances(680) |              |             |               |
  # | Sum(1724)               |              |             |               |

*** 評価 (制限時間内に解けた問題の数)

  #+begin_smaller
  LMcut : state-of-the-art ヒューリスティック関数
  # LMcut, Merge-and-Shrink(M&S) : state-of-the-art ヒューリスティック関数

  ［h, RD, RO］ は 10回の平均
  #+end_smaller

  | /                       | <            | >           | <>                |
  |                         | <c>          | <c>         | <c>               |
  |                         | ［h, FIFO］  | ［h, LIFO］ | ［h, RD, RO］     |
  | Domain Set              | (FD Default) |             | (Proposed)        |
  |-------------------------+--------------+-------------+-------------------|
  | IPC Instances (1104)    | 558          | 565         | *572.8* (↑ 14.8) |
  | Zerocost Instances(680) | 256          | 279         | *294.2* (↑ 38.2) |
  | Sum(1724)               | 814          | 844         | *867.0* (↑ 53.0) |
  |-------------------------+--------------+-------------+-------------------|
  # | M&S                     |              |             |                   |
  # | IPC Instances (1104)    | 479          | *488*       | 484.0 (↑ 5.0)    |
  # | Zerocost Instances(680) | 276          | 290         | *310.2* (↑ 34.2) |
  # | Sum(1724)               | 755          | 778         | *794.2* (↑ 39.2) |

  #+begin_alignright
  *［h, RD, RO］ は [h,FIFO] と [h,LIFO] より圧倒的に良い!*
  #+end_alignright

** A*に他の充足解探索を埋め込んで実験: 性能向上

  + 通常のA* :: $[f, h,$  * $]\;$ , ただし * は LIFO, FIFO, Random のいずれか

  + ユニットコスト化した 許容的下界関数 $\hat{h}\;$ でタイブレーク : 辺コストを1で置き換えて計算 (充足解ソルバLAMA[Richter et.al.]などが使用している手法) ::
       $[f=g+h, \hat{h}, * ]$, $[f, h, \hat{h}, * ]$ の二種類。 -- ただし、同じ下界関数を $h$ と $\hat{h}$ の二回計算するので遅い

       ユニットコスト化下界関数は許容的ではない関数

       実験の目的: 純粋にユニットコスト化しただけで得られる性能向上を計測

  + ユニットコスト化した 非許容的下界関数 $\hat{h}^{FF}$ でタイブレーク ::
       $[f, \hat{h}^{FF}, *]$ , $[f, h, \hat{h}^{FF}, * ]$ -- cheaper, non-path-optimal heuristics

  + $\hat{h}^{FF}$ に random depth を組合せ ::
       $[f, \hat{h}^{FF}, \langle d \rangle$ , * $]$

*** Evaluation ($h=\text{LMcut}$, Zerocost domains)

  5min, 4GB, 前章と同じ

  |                                        | ＊=FIFO | ＊=LIFO | ＊=Random |
  |----------------------------------------+---------+---------+-----------|
  | $[f,h,*]$                              |     256 |     279 |     261.9 |
  | $[f,h,\langle d \rangle,*]$            |     284 |     264 |     288.1 |
  | $[f,\hat{h},*]$                        |     295 |     303 |     301.0 |
  | $[f,h,\hat{h},*]$                      |     305 |     309 |     305.9 |
  | $[f,\hat{h}^{FF},*]$                   |     337 |     340 |       341 |
  | $[f,\hat{h}^{FF},\langle d \rangle,*]$ |   *340* |   *342* |   *344.3* |
  |                                        |   (+80) |   (+60) |     (+80) |

*** Evaluation ($h=\text{M&S}$, Zerocost domains)

  5min, 4GB, 前章と同じ

  |                                        | ＊=FIFO | ＊=LIFO | ＊=Random |
  |----------------------------------------+---------+---------+-----------|
  | $[f,h,*]$                              |     280 |     301 |     287.7 |
  | $[f,h,\langle d \rangle,*]$            |     302 |     288 |     308.1 |
  | $[f,\hat{h},*]$                        |     308 |     305 |     307.3 |
  | $[f,h,\hat{h},*]$                      |     307 |     306 |     307.8 |
  | $[f,\hat{h}^{FF},*]$                   |     336 |     331 |   _337.9_ |
  | $[f,\hat{h}^{FF},\langle d \rangle,*]$ |   *337* |   *333* |   _337.6_ |
  |                                        |   (+50) |   (+30) |     (+50) |


*** 下界関数を二個評価する場合を減らすために動的に切り替え

  $[f=g+h, \hat{h}^{FF}]$ --- $h$ と $\hat{h}^{FF}$ の2つの下界関数を評価

  + これが役に立つのはplateauが巨大な場合のみ (特にゼロコスト問題)

  + ゼロコストでない場合には通常の方式にきりかえれば無駄な評価を避けられる

  IPC+Zerocost results

  |---+------------------------------------------------------+---------+---------|
  |   | *Single heuristics*                                  |   LMcut |     M&S |
  |---+------------------------------------------------------+---------+---------|
  | / | $[f,h,\text{fifo}]$                                  |     814 |     771 |
  |   | A $[f,h,\text{lifo}]$                                |     844 |     797 |
  | / | $[f,h,\text{Random}]$                                |   820.8 |   777.1 |
  | / | $[f,h,\langle d \rangle,\text{fifo}]$                |     855 |     789 |
  |   | B $[f,h,\langle d \rangle,\text{lifo}]$              |     839 |     775 |
  | / | $[f,h,\langle d \rangle,\text{Random}]$              |   859.5 |   793.7 |
  | / | [0.3em] Distance-to-Go                               |         |         |
  | / | $[f,\hh,\text{fifo}]$                                |     829 |     785 |
  | / | $[f,\hh,\text{lifo}]$                                |     837 |     780 |
  | / | $[f,\hh,\text{Random}]$                              |    835. |   777.7 |
  | / | $[f,h,\hh,\text{fifo}]$                              |     841 |     783 |
  | / | $[f,h,\hh,\text{lifo}]$                              |     844 |     781 |
  | / | $[f,h,\hh,\text{Random}]$                            |   840.6 |   778.7 |
  |---+------------------------------------------------------+---------+---------|
  |   | *Multi heuristics*                                   |   LMcut |     M&S |
  |---+------------------------------------------------------+---------+---------|
  | / | $[f,\hat{h}^{FF},\text{fifo}]$                       |     901 |     794 |
  | / | $[f,\hat{h}^{FF},\text{lifo}]$                       |     902 |     788 |
  | / | $[f,\hat{h}^{FF},\text{Random}]$                     |   904.7 |   794.9 |
  | / | $[f,\hat{h}^{FF},\langle d \rangle,\text{fifo}]$     |     903 |     794 |
  | / | $[f,\hat{h}^{FF},\langle d \rangle,\text{lifo}]$     |     902 |     790 |
  |   | C $[f,\hat{h}^{FF},\langle d \rangle,\text{Random}]$ |   906.2 |   794.4 |
  |---+------------------------------------------------------+---------+---------|
  |   | Dynamic Configuration                                |   LMcut |     M&S |
  |---+------------------------------------------------------+---------+---------|
  |   | If ゼロコストがある場合: C ; Else B                  | *911.9* |         |
  |   | If ゼロコストがある場合: C ; Else A                  |         | *832.3* |
  |---+------------------------------------------------------+---------+---------|

** GBFS plateau内/外 error は 独立: 実験

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span6
 [[png:icaps17-results]]
 #+end_span6
 #+begin_span6
 + hd (RandomDepth) :: plateau内で Randomize <d>
 + hD (Type GBFS) :: Randomize <g,h>
 + hdD :: */RandomDepth + Type GBFS/*

 結果:

 + ドメインごとに plateau内 と plateau外 非局在化 の影響の有無が 綺麗に別れる
 + *同時に使うことで /効果が綺麗に重なる/*
 + _/plateau内外は独立だから、非局在化手法は、内外に同時に使うべし!/_
 #+end_span6
 #+end_row-fluid
 #+end_container-fluid

** GBFS+BIP 評価

  #+begin_container-fluid
  #+begin_row-fluid
  #+begin_span6
  [[png:icaps17-results2]]
  #+end_span6
  #+begin_span6
  + *hb* : *plateau内BIP* ([h, BIP, *])
  + *hB* : *plateau外BIP* (*alt* ([BIP], [h,*]))
  + *hbB* : *同時使用* (*alt* ([BIP], [h,BIP,*]) )
  + *hdD* : *RandomDepth + Type GBFS*
  + _/plateau内外errorの直交性/_ を再び観測
  + vs hdD (深さベースの非局在化): 同じぐらい効果的
    + 性能向上は *異なるドメイン* で発生
    + hdD は *深さ*, hbB は *幅* 非局在化するから
  #+end_span6
  #+end_row-fluid
  #+end_container-fluid

*** VS. State-of-the-Art

 #+begin_container-fluid
 #+begin_row-fluid
 #+begin_span7
 [[png:icaps17-results3]]
 #+end_span7
 #+begin_span5
 + db^2 DB : (各イテレーション毎) plateau外非局在化に D,B をに切り替え ; plateau内に d,b を切り替え
 + *深さ (d,D)* と *幅 (b,B)* で別の効果があるから
 + 効果がうまく重なりあって state of the art (LAMA) の性能を向上
 #+end_span5
 #+end_row-fluid
 #+end_container-fluid

** MTCSの分析をなぜしない?

MTCS はプランニングではうまく行っていない。その理由を調べるのは議論の範囲外

THTS (Schulte and Keller, 2014) --- プランニング向けのMCTS. 性能向上はわずか

例: 解けた問題数

 GBFS328→THTS-WA* 344 (4%向上), 私の提案手法は GBFS192→237.7 (20%向上) (ベースラインは違う)

 ↑しかもこのGBFSは THTS上でのGBFSのエミュレーション

 (著者はTHTS+A*,THTS+UCTのような様々なバージョンを提案, しかも THTS+UCT は THTS+WA* に負けている)

ランダムウォーク自体は成功例がある。が、かなりad-hocな手法

Arvand (Nakhost 2009,2010) --- 適応的(長さ可変)ランダムウォーク+etc.
